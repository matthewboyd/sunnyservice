// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SunnyServiceClient is the client API for SunnyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SunnyServiceClient interface {
	GetSunnyActivities(ctx context.Context, in *GetSunnyActivitiesParams, opts ...grpc.CallOption) (*Activity, error)
}

type sunnyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSunnyServiceClient(cc grpc.ClientConnInterface) SunnyServiceClient {
	return &sunnyServiceClient{cc}
}

func (c *sunnyServiceClient) GetSunnyActivities(ctx context.Context, in *GetSunnyActivitiesParams, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, "/template.SunnyService/GetSunnyActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SunnyServiceServer is the server API for SunnyService service.
// All implementations must embed UnimplementedSunnyServiceServer
// for forward compatibility
type SunnyServiceServer interface {
	GetSunnyActivities(context.Context, *GetSunnyActivitiesParams) (*Activity, error)
	mustEmbedUnimplementedSunnyServiceServer()
}

// UnimplementedSunnyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSunnyServiceServer struct {
}

func (UnimplementedSunnyServiceServer) GetSunnyActivities(context.Context, *GetSunnyActivitiesParams) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSunnyActivities not implemented")
}
func (UnimplementedSunnyServiceServer) mustEmbedUnimplementedSunnyServiceServer() {}

// UnsafeSunnyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SunnyServiceServer will
// result in compilation errors.
type UnsafeSunnyServiceServer interface {
	mustEmbedUnimplementedSunnyServiceServer()
}

func RegisterSunnyServiceServer(s grpc.ServiceRegistrar, srv SunnyServiceServer) {
	s.RegisterService(&SunnyService_ServiceDesc, srv)
}

func _SunnyService_GetSunnyActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSunnyActivitiesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunnyServiceServer).GetSunnyActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template.SunnyService/GetSunnyActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunnyServiceServer).GetSunnyActivities(ctx, req.(*GetSunnyActivitiesParams))
	}
	return interceptor(ctx, in, info, handler)
}

// SunnyService_ServiceDesc is the grpc.ServiceDesc for SunnyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SunnyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template.SunnyService",
	HandlerType: (*SunnyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSunnyActivities",
			Handler:    _SunnyService_GetSunnyActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sunny_activities.proto",
}
